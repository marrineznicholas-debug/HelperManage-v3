import { database, ref, set, onValue, push } from './firebase-config.js';
import { showToast, debounce, getRandomJoke } from './utils.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let mainData = [];
let errorsData = [];
let stats = {
    notesAdded: 0,
    rowsDeleted: 0,
    errorsCount: 0,
    totalProcessed: 0
};

let keywords = [];

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
const regex = /–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (\w+) –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ä–µ–ø–æ—Ä—Ç (\w+): –í–æ–ø—Ä–æ—Å:(.*?) –û—Ç–≤–µ—Ç:(.*)/;

document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initApp();
});

function initApp() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const inputData = document.getElementById('inputData');
    const parseBtn = document.getElementById('parseBtn');
    const clearAllBtn = document.getElementById('clearAllBtn');
    const copyErrorsBtn = document.getElementById('copyErrorsBtn');
    const mainTableBody = document.getElementById('mainTableBody');
    const errorsTableBody = document.getElementById('errorsTableBody');
    const emptyMain = document.getElementById('emptyMain');
    const emptyErrors = document.getElementById('emptyErrors');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const statsBtn = document.getElementById('statsBtn');
    const keywordsBtn = document.getElementById('keywordsBtn');
    const statsOverlay = document.getElementById('statsOverlay');
    const keywordsOverlay = document.getElementById('keywordsOverlay');
    const closeModalButtons = document.querySelectorAll('.close-modal');
    const modalNotesCount = document.getElementById('modalNotesCount');
    const modalDeletedCount = document.getElementById('modalDeletedCount');
    const modalErrorsCount = document.getElementById('modalErrorsCount');
    const modalTotalCount = document.getElementById('modalTotalCount');
    const newKeywordInput = document.getElementById('newKeyword');
    const addKeywordBtn = document.getElementById('addKeywordBtn');
    const keywordList = document.getElementById('keywordList');
    const deleteByKeywordsBtn = document.getElementById('deleteByKeywordsBtn');
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase
    loadFirebaseData();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    function setupEventListeners() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        parseBtn.addEventListener('click', handleParse);
        clearAllBtn.addEventListener('click', handleClearAll);
        copyErrorsBtn.addEventListener('click', handleCopyErrors);
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        statsBtn.addEventListener('click', () => statsOverlay.classList.add('active'));
        keywordsBtn.addEventListener('click', () => keywordsOverlay.classList.add('active'));
        
        closeModalButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                statsOverlay.classList.remove('active');
                keywordsOverlay.classList.remove('active');
            });
        });
        
        [statsOverlay, keywordsOverlay].forEach(overlay => {
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) overlay.classList.remove('active');
            });
        });
        
        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        addKeywordBtn.addEventListener('click', handleAddKeyword);
        deleteByKeywordsBtn.addEventListener('click', handleDeleteByKeywords);
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
        inputData.addEventListener('input', debounce(() => {
            saveToFirebase('inputText', inputData.value);
        }, 1000));
    }
    
    function handleParse() {
        const text = inputData.value.trim();
        if (!text) {
            showToast('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!', false);
            return;
        }
        
        const lines = text.split('\n');
        const newData = [];
        
        lines.forEach(line => {
            const match = line.match(regex);
            if (match) {
                newData.push({
                    admin: match[1],
                    reporter: match[2],
                    question: match[3].trim(),
                    answer: match[4].trim(),
                    note: ''
                });
            }
        });
        
        if (newData.length === 0) {
            showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.', false);
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        mainData = [...mainData, ...newData];
        stats.totalProcessed += newData.length;
        
        renderMainTable();
        saveAllData();
        updateEmptyStates();
        updateStats();
        
        showToast(getRandomJoke() + newData.length);
    }
    
    function handleClearAll() {
        if (confirm("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")) {
            clearAllData();
            updateEmptyStates();
            showToast("–¢–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã! –ß–∏—Å—Ç—ã–π –ª–∏—Å—Ç - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üòä");
        }
    }
    
    function handleCopyErrors() {
        if (errorsData.length === 0) {
            showToast("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!", false);
            return;
        }
        
        const textarea = document.createElement('textarea');
        textarea.style.position = 'fixed';
        textarea.style.opacity = 0;
        
        let text = "–†–µ–ø–æ—Ä—Ç\t–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ\n";
        errorsData.forEach(error => {
            text += `${error.report}\t${error.note}\n`;
        });
        
        textarea.value = text;
        document.body.appendChild(textarea);
        textarea.select();
        
        try {
            const successful = document.execCommand('copy');
            showToast(successful ? "–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!" : "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", successful);
        } catch (err) {
            showToast("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: " + err, false);
        }
        
        document.body.removeChild(textarea);
    }
    
    function handleAddKeyword() {
        const keyword = newKeywordInput.value.trim();
        if (keyword && !keywords.includes(keyword)) {
            keywords.push(keyword);
            saveToFirebase('keywords', keywords);
            renderKeywords();
            newKeywordInput.value = '';
            showToast('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        } else if (keywords.includes(keyword)) {
            showToast('–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ', false);
        }
    }
    
    function handleDeleteByKeywords() {
        if (keywords.length === 0) {
            showToast('–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', false);
            return;
        }
        
        let deletedCount = 0;
        const remainingData = [];
        
        for (const item of mainData) {
            let shouldDelete = false;
            
            for (const keyword of keywords) {
                if (
                    item.question.toLowerCase().includes(keyword.toLowerCase()) ||
                    item.answer.toLowerCase().includes(keyword.toLowerCase())
                ) {
                    shouldDelete = true;
                    break;
                }
            }
            
            if (shouldDelete) {
                deletedCount++;
            } else {
                remainingData.push(item);
            }
        }
        
        mainData = remainingData;
        stats.rowsDeleted += deletedCount;
        stats.totalProcessed += deletedCount;
        
        saveAllData();
        updateStats();
        renderMainTable();
        updateEmptyStates();
        
        showToast(`–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç—Ä–æ–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º`);
    }
    
    // Firebase —Ñ—É–Ω–∫—Ü–∏–∏
    function loadFirebaseData() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        onValue(ref(database, 'inputText'), (snapshot) => {
            const data = snapshot.val();
            if (data) inputData.value = data;
        });
        
        onValue(ref(database, 'mainData'), (snapshot) => {
            const data = snapshot.val();
            if (data) {
                mainData = data;
                renderMainTable();
            }
        });
        
        onValue(ref(database, 'errorsData'), (snapshot) => {
            const data = snapshot.val();
            if (data) {
                errorsData = data;
                renderErrorsTable();
            }
        });
        
        onValue(ref(database, 'stats'), (snapshot) => {
            const data = snapshot.val();
            if (data) {
                stats = data;
                updateStats();
            }
        });
        
        onValue(ref(database, 'keywords'), (snapshot) => {
            const data = snapshot.val();
            if (data) {
                keywords = data;
                renderKeywords();
            }
        });
        
        updateEmptyStates();
    }
    
    function saveToFirebase(path, data) {
        set(ref(database, path), data).catch((error) => {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firebase:", error);
            showToast("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", false);
        });
    }
    
    function saveAllData() {
        saveToFirebase('mainData', mainData);
        saveToFirebase('errorsData', errorsData);
        saveToFirebase('stats', stats);
        saveToFirebase('inputText', inputData.value);
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (renderMainTable, renderErrorsTable, renderKeywords, etc.)
    // –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ, –Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Firebase
}